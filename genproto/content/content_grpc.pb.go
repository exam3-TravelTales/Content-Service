// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: content.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	CreateStories(ctx context.Context, in *CreateStoriesRequest, opts ...grpc.CallOption) (*CreateStoriesResponse, error)
	UpdateStories(ctx context.Context, in *UpdateStoriesReq, opts ...grpc.CallOption) (*UpdateStoriesRes, error)
	DeleteStories(ctx context.Context, in *DeleteStoriesReq, opts ...grpc.CallOption) (*Void, error)
	GetAllStories(ctx context.Context, in *GetAllStoriesReq, opts ...grpc.CallOption) (*GetAllStoriesRes, error)
	GetStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*GetStoryRes, error)
	CommentStory(ctx context.Context, in *CommentStoryReq, opts ...grpc.CallOption) (*CommentStoryRes, error)
	GetCommentsOfStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*GetCommentsOfStoryRes, error)
	Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeRes, error)
	Itineraries(ctx context.Context, in *ItinerariesReq, opts ...grpc.CallOption) (*ItinerariesRes, error)
	UpdateItineraries(ctx context.Context, in *UpdateItinerariesReq, opts ...grpc.CallOption) (*ItinerariesRes, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) CreateStories(ctx context.Context, in *CreateStoriesRequest, opts ...grpc.CallOption) (*CreateStoriesResponse, error) {
	out := new(CreateStoriesResponse)
	err := c.cc.Invoke(ctx, "/content.Content/CreateStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateStories(ctx context.Context, in *UpdateStoriesReq, opts ...grpc.CallOption) (*UpdateStoriesRes, error) {
	out := new(UpdateStoriesRes)
	err := c.cc.Invoke(ctx, "/content.Content/UpdateStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteStories(ctx context.Context, in *DeleteStoriesReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/content.Content/DeleteStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllStories(ctx context.Context, in *GetAllStoriesReq, opts ...grpc.CallOption) (*GetAllStoriesRes, error) {
	out := new(GetAllStoriesRes)
	err := c.cc.Invoke(ctx, "/content.Content/GetAllStories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*GetStoryRes, error) {
	out := new(GetStoryRes)
	err := c.cc.Invoke(ctx, "/content.Content/GetStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CommentStory(ctx context.Context, in *CommentStoryReq, opts ...grpc.CallOption) (*CommentStoryRes, error) {
	out := new(CommentStoryRes)
	err := c.cc.Invoke(ctx, "/content.Content/CommentStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetCommentsOfStory(ctx context.Context, in *StoryId, opts ...grpc.CallOption) (*GetCommentsOfStoryRes, error) {
	out := new(GetCommentsOfStoryRes)
	err := c.cc.Invoke(ctx, "/content.Content/GetCommentsOfStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeRes, error) {
	out := new(LikeRes)
	err := c.cc.Invoke(ctx, "/content.Content/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) Itineraries(ctx context.Context, in *ItinerariesReq, opts ...grpc.CallOption) (*ItinerariesRes, error) {
	out := new(ItinerariesRes)
	err := c.cc.Invoke(ctx, "/content.Content/Itineraries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateItineraries(ctx context.Context, in *UpdateItinerariesReq, opts ...grpc.CallOption) (*ItinerariesRes, error) {
	out := new(ItinerariesRes)
	err := c.cc.Invoke(ctx, "/content.Content/UpdateItineraries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	CreateStories(context.Context, *CreateStoriesRequest) (*CreateStoriesResponse, error)
	UpdateStories(context.Context, *UpdateStoriesReq) (*UpdateStoriesRes, error)
	DeleteStories(context.Context, *DeleteStoriesReq) (*Void, error)
	GetAllStories(context.Context, *GetAllStoriesReq) (*GetAllStoriesRes, error)
	GetStory(context.Context, *StoryId) (*GetStoryRes, error)
	CommentStory(context.Context, *CommentStoryReq) (*CommentStoryRes, error)
	GetCommentsOfStory(context.Context, *StoryId) (*GetCommentsOfStoryRes, error)
	Like(context.Context, *LikeReq) (*LikeRes, error)
	Itineraries(context.Context, *ItinerariesReq) (*ItinerariesRes, error)
	UpdateItineraries(context.Context, *UpdateItinerariesReq) (*ItinerariesRes, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) CreateStories(context.Context, *CreateStoriesRequest) (*CreateStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStories not implemented")
}
func (UnimplementedContentServer) UpdateStories(context.Context, *UpdateStoriesReq) (*UpdateStoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStories not implemented")
}
func (UnimplementedContentServer) DeleteStories(context.Context, *DeleteStoriesReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStories not implemented")
}
func (UnimplementedContentServer) GetAllStories(context.Context, *GetAllStoriesReq) (*GetAllStoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStories not implemented")
}
func (UnimplementedContentServer) GetStory(context.Context, *StoryId) (*GetStoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedContentServer) CommentStory(context.Context, *CommentStoryReq) (*CommentStoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentStory not implemented")
}
func (UnimplementedContentServer) GetCommentsOfStory(context.Context, *StoryId) (*GetCommentsOfStoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsOfStory not implemented")
}
func (UnimplementedContentServer) Like(context.Context, *LikeReq) (*LikeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedContentServer) Itineraries(context.Context, *ItinerariesReq) (*ItinerariesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Itineraries not implemented")
}
func (UnimplementedContentServer) UpdateItineraries(context.Context, *UpdateItinerariesReq) (*ItinerariesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItineraries not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_CreateStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/CreateStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateStories(ctx, req.(*CreateStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/UpdateStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateStories(ctx, req.(*UpdateStoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/DeleteStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteStories(ctx, req.(*DeleteStoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/GetAllStories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllStories(ctx, req.(*GetAllStoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetStory(ctx, req.(*StoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CommentStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentStoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CommentStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/CommentStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CommentStory(ctx, req.(*CommentStoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetCommentsOfStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetCommentsOfStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/GetCommentsOfStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetCommentsOfStory(ctx, req.(*StoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Like(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_Itineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItinerariesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Itineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/Itineraries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Itineraries(ctx, req.(*ItinerariesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItinerariesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.Content/UpdateItineraries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateItineraries(ctx, req.(*UpdateItinerariesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStories",
			Handler:    _Content_CreateStories_Handler,
		},
		{
			MethodName: "UpdateStories",
			Handler:    _Content_UpdateStories_Handler,
		},
		{
			MethodName: "DeleteStories",
			Handler:    _Content_DeleteStories_Handler,
		},
		{
			MethodName: "GetAllStories",
			Handler:    _Content_GetAllStories_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _Content_GetStory_Handler,
		},
		{
			MethodName: "CommentStory",
			Handler:    _Content_CommentStory_Handler,
		},
		{
			MethodName: "GetCommentsOfStory",
			Handler:    _Content_GetCommentsOfStory_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _Content_Like_Handler,
		},
		{
			MethodName: "Itineraries",
			Handler:    _Content_Itineraries_Handler,
		},
		{
			MethodName: "UpdateItineraries",
			Handler:    _Content_UpdateItineraries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
